<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on EzequielTBH Blog&#39;s</title>
        <link>https://ezequieltbh.me/posts/</link>
        <description>Recent content in Posts on EzequielTBH Blog&#39;s</description>
        <generator>Hugo -- gohugo.io</generator>
        <copyright>All rights reserved.</copyright>
        <lastBuildDate>Sat, 18 May 2019 19:24:49 -0300</lastBuildDate>
        <atom:link href="https://ezequieltbh.me/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Love is in the air: Reverse Engineering a shitty drone</title>
            <link>https://ezequieltbh.me/posts/2019/05/love-is-in-the-air-reverse-engineering-a-shitty-drone/</link>
            <pubDate>Sat, 18 May 2019 19:24:49 -0300</pubDate>
            
            <guid>https://ezequieltbh.me/posts/2019/05/love-is-in-the-air-reverse-engineering-a-shitty-drone/</guid>
            <description>On March 9, 2018, (hey, better late than never :), Security Jam, a security meeting/conference, was held, where speakers present their Research in a relaxed environment.
Last year I was lucky enough to be able to participate as a Speaker giving a talk called:
Love is in the air: Reverse Engineering a shitty drone.
In addition to the Security Jam, I presented this talk at CharruaCon and 8.8 Chile, two highly recommended conferences for those who have not attended!</description>
            <content type="html"><![CDATA[

<p>On March 9, 2018, (hey, better late than never :), <strong>Security Jam</strong>, a security meeting/conference, was held, where speakers present their Research in a relaxed environment.</p>

<p>Last year I was lucky enough to be able to participate as a Speaker giving a talk called:</p>

<p><strong>Love is in the air: Reverse Engineering a shitty drone.</strong></p>

<p>In addition to the Security Jam, I presented this talk at <strong>CharruaCon</strong> and <strong>8.8 Chile</strong>, two highly recommended conferences for those who have not attended!</p>

<p>Here you will find out the details of the talk and, of course, will have access to the created code ;)</p>

<h1 id="tl-dr"><strong>TL;DR</strong></h1>

<p>Research carried out on a <strong>SYMA X5SW Drone</strong> with three defined objectives.</p>

<ol>
<li><p>Intercept the telemetry of the Drone and display it in a graphical interface in real-time.</p></li>

<li><p>Create a <strong>transmitter</strong> (command control), using RF, Arduino modules and C code.</p></li>

<li><p><strong>Intercept</strong> the video stream of the camera and look for vulnerabilities in it.</p></li>
</ol>

<p>First, we will talk about some basics of radiofrequency, tips to start a project of this type and the problems that occurred throughout.</p>

<p>The research started with a SYMA X5SW, after playing a bit with it, it occurred to me if I could try to reverse engineer and understand its communication protocol to &ldquo;hijack it&rdquo;</p>

<p><img src="/images/posts/love-is-the-air/image6.jpg" alt="Syma-Drone" /></p>

<h1 id="objective-1-intercept-the-telemetry-of-the-drone">Objective 1: Intercept the telemetry of the Drone.</h1>

<p>The idea behind this objective is to be able to capture the packages in mid-flight, as well as understand the communication protocol in order to obtain what the actions sent by the controller are and finally show all the information in a graphical interface!</p>

<p>The first thing we want to find out, is what channel of communication is being used by the transmitter and the drone to communicate. Then, we want to know what hardware we need, the possibilities are:</p>

<ol>
<li><p>Wifi</p></li>

<li><p>Radiofrequency</p></li>

<li><p>Bluetooth</p></li>
</ol>

<p>To find this, we have several ways to do this:</p>

<ol>
<li><p>Open the transmitter and recognize the chipsets used, then search the internet until We find the manual and its specification.</p></li>

<li><p>Read the manual and the box of the Drone because usually they specify this information in most cases.</p></li>

<li><p>Search by the <strong>FCC-ID</strong>.</p></li>
</ol>

<p>The first two options are the best known and used, but the last one not many people know about and can accelerate everything a little&hellip;</p>

<p>The <strong>FCC (Federal Communications Commission)</strong> is a US government agency that is responsible for analyzing all devices working with radiofrequency and makes comprehensive reports about the capabilities of these devices.</p>

<p>Manuals of the manufacturer, internal and external photos of the device, specifications of the chipsets used, a gold mine!</p>

<p>All this information, fortunately, is publicly available at <a href="https://fccid.io/" target="_blank">https://fccid.io/</a></p>

<p>In our particular case, we found the information we were looking for:</p>

<p><img src="/images/posts/love-is-the-air/image12.png" alt="FCC-Data" /></p>

<p>As you can see, the model we find in the database is different from the model that we were investigating, but reading carefully the report found it is mentioned that the electronics included in that model are the same for the one we are investigating.</p>

<p>Finally, if we looked at the box we found some information&hellip;</p>

<p><img src="/images/posts/love-is-the-air/image14.jpg" alt="Controller-Frecuency" />
<img src="/images/posts/love-is-the-air/image4.png" alt="Four-Channel-Box" /></p>

<p>It seems that the report did not lie, <strong>2.4Ghz</strong> and apparently works with four channels (Of which we are only interested in 1, I will explain this in-depth later).</p>

<p><strong>Perfect, we have the frequency!</strong></p>

<p>The problem is that we need more expensive hardware to be able to do the research, since the majority of SDR dongles of the <strong>RTL2832U</strong> style only reach up to 800 Mhz.</p>

<p>Here we have two options:</p>

<ol>
<li><p>Use an <strong>RTL2832U dongle</strong>, with a <strong>2.4 Ghz downconverter</strong> that will lower the frequency down to approximately <strong>400 Mhz</strong> which is supported by the Dongle.</p></li>

<li><p>Use the <strong>HackRF / BladeRF</strong>, which supports that frequency and has a wider bandwidth.</p></li>
</ol>

<p>In my case, I used the <strong>HackRF</strong> because it was what I had at hand.</p>

<p>The next step is to start working on intercepting the signal and flight packets.</p>

<p>Due to my little knowledge in this field, I decided to investigate a bit on the Internet about this&hellip;</p>

<p>And I was lucky&hellip;</p>

<p><img src="/images/posts/love-is-the-air/image16.png" alt="PHP-VI-Challenge" /></p>

<p>There is a conference that takes place in <strong>Moscow, Russia, called Positive Hack Days</strong>, where there was a challenge that was based on hijacking a Syma brand drone.
After finishing the challenge, they created a blog post explaining all the technical details of how they achieved this and they had a functional receiver and transmitter.</p>

<p>All the code developed is at <a href="https://github.com/chopengauer/nrf_analyze" target="_blank">https://github.com/chopengauer/nrf_analyze</a></p>

<p>The first step is to test the receiver and transmitter created by them and see if it works with our Drone.</p>

<ol>
<li><p>Clone the project: git clone <a href="https://github.com/chopengauer/nrf_analyze" target="_blank">https://github.com/chopengauer/nrf_analyze</a></p></li>

<li><p>Install the <strong>HackRF</strong> and <strong>GNU Radio</strong> in our Operating System. A tip for that: <strong>GNU Radio</strong> in the Ubuntu repositories does not work correctly, so it is necessary to compile from the source. If you use MacOS you can use Brew.</p></li>

<li><p>Connect the <strong>HackRF</strong> and open the <strong>GNU Radio</strong> template.</p></li>

<li><p>Run the python script <strong>nrf_analyze.py</strong>: You have to change the following line to get the correct PIPE data:</p></li>
</ol>

<p><a href="https://github.com/chopengauer/nrf_analyze/blob/master/nrf24_analyzer.py#L65" target="_blank">https://github.com/chopengauer/nrf_analyze/blob/master/nrf24_analyzer.py#L65</a></p>

<p>If everything works correctly, we can use the Drone and we should see the flight packages.</p>

<p><img src="/images/posts/love-is-the-air/image3.png" alt="Graphic-Comms" /></p>

<p>Unfortunately, we do not see any package, so we have to analyze the code and find what the problems are.</p>

<p>Reviewing the code, we can find some hard-coded data such as addresses, routes to PIPEs, channel numbers, etc.
Because of this, we may not have been able to capture any flight pack in our previous test.</p>

<p>Let&rsquo;s review each of the points mentioned</p>

<h4 id="1-frequency"><strong>1. Frequency</strong></h4>

<p>Thanks to the <strong>FCC</strong> report we know that the frequency of operation of the drone is between:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">2.41 - 2.474 GHz</code></pre></div>
<p>We will check this in the next step when searching for bandwidth and channels.</p>

<h4 id="2-channels"><strong>2. Channels</strong></h4>

<p>A radiofrequency channel is a way to separate and identify a group of frequencies, which will be used for the transmission or reception of data.</p>

<p>In our case, reading the manual of the transmission module that is used we can obtain a separation of <strong>1 Mhz</strong>, which gives us <strong>125</strong> possible channels <strong>(2,400 - 2,525 Ghz)</strong>.</p>

<p>So now, using the <strong>nrf_analyze</strong> project again, we can load in the <strong>GNU Radio nrf.grc</strong> and connect our <strong>HackRF</strong> to look for the channels, according to the drone box, there are supposedly 4.</p>

<p>Now we start the <strong>nrf.grc</strong> template and we need to change the channels, we used the original transmitter of the Drone to transmit movement commands and see if we could find the signal, and so we changed channels one by one</p>

<p>In the end, we found that the channels are:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">22, 26, 30, and 34</code></pre></div>
<p><img src="/images/posts/love-is-the-air/image10.png" alt="Channel-Gnuradio" /></p>

<h4 id="3-address-of-the-drone"><strong>3. Address of the drone</strong></h4>

<p>What is this exactly?</p>

<p>If we think that the communication of the data is done through radiofrequency, that as we saw, this has a fixed spectrum range and also fixed channels, this means that if we fly two drones of the same model one next to the other would not be possible.</p>

<p>This is because one would be transmitting and causing noise for the other drone.</p>

<p>To avoid this, there is the address that is sent in the transmitted data itself and that allows us to identify for which device that data packet is directed.
With this, it is possible to have two drones flying in the same physical space!</p>

<p>To find the mentioned address, we opened the previous <strong>GNU Radio</strong> template and we configured one of the channels that we found previously.
We create a linux PIPE and we placed it in the <strong>GNU Radio</strong> template to start the <strong>nrf_analyze</strong> tool and started to see the flight packages.</p>

<p>In the end, we ended up finding the address of the drone looking at the first bytes of the packets:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">a1ca192dbc</code></pre></div>
<h4 id="4-bandwidth-and-bit-rate"><strong>4. Bandwidth and bit-rate</strong></h4>

<p>To obtain this information, we used the <strong>FCC</strong> manual that we found earlier.</p>

<p><img src="/images/posts/love-is-the-air/image2.png" alt="Fcc-Documentation-Two" /></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">Bandwidth 800 kHz for 250 kbps rate</code></pre></div>
<p>All ready, recapitulating a little the differences lie in the Channels and the &ldquo;Drone Address&rdquo;.
Everything else does not need modification &hellip;</p>

<h2 id="the-payload-and-its-format">The payload and its format</h2>

<p><img src="/images/posts/love-is-the-air/image8.png" alt="Format-Payload" /></p>

<p>Reading the transmission manual we get with the data format transmitted, the image explains everything quite well.</p>

<p>A byte is used as a preamble, which the receivers use to identify data packets entering, then the address that we explained above, it is used as an identifier, a payload that is the data that we are interested in transmitting and, finally, a <strong>CRC</strong> of 2 bytes to make sure we receive the payload correctly.</p>

<p>Below you can see an example of the payload and the meaning of each important byte:</p>

<p><img src="/images/posts/love-is-the-air/image5.png" alt="Packet-Example" /></p>

<ol>
<li>Engine accelerator.</li>
<li>Tilt (Forward or backward) (*)</li>
<li>Rudder (Turn on axis) (*)</li>
<li>Ailerons (left or right tilt) (*)</li>
<li>CRC (XOR of the first 9 bytes + 0x55)
(*) (Higher bit = direction, remaining bits = value)</li>
</ol>

<p>Now we have everything you need to create the intercept script!</p>

<p><strong>droneTelemetry.py</strong></p>

<ol>
<li>Class <strong>DecoderSymaX5SW</strong>: Parses every byte of the flight packet, returning an action.</li>
<li>Class <strong>DisplayDrone</strong>: Using urwid, it shows a graphical interface with the actions of the drone.</li>
</ol>

<p><strong>Telemetry in real-time :)</strong></p>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="//www.youtube.com/embed/OhET0bT48bQ" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<h1 id="objective-2-transmit-orders-to-the-drone">Objective 2: Transmit orders to the Drone.</h1>

<p>Here the interesting part begins, the idea is to create a transmitter that is capable of sending orders to the Drone, just as the original controller does.</p>

<p>For this we are going to need a couple of things:</p>

<h4 id="1-a-radio-frequency-transmission-module"><strong>1. A radio frequency transmission module</strong></h4>

<p>The <strong>NRF24</strong> module is the one usually used in most of these devices, in the case of our original controller, it uses a cloned version of the original module.</p>

<p>The good thing about this module is its price (Three - Five USD) and that it works on <strong>Arduino, Raspberry Pi and BeagleBone</strong>.</p>

<p><img src="/images/posts/love-is-the-air/image11.jpg" alt="Antenna" /></p>

<p>A device where to run our code and connect our transmitter</p>

<p>We need to take special care about this since in other electronic or IoT projects, choosing between an <strong>Arduino, Raspberry Pi or BeagleBone</strong> is <strong>personal</strong> taste.</p>

<p>In this case, the latency factor and transmission speed is critical, we need to have the minimum possible latency between the code and the transmission module so that in a matter of milliseconds our packets are transmitted, otherwise the drone would literally fall to the ground.</p>

<p>For this reason the choice is <strong>Arduino</strong>, for the absence of a complex and heavier operating system that punishes the performance when executing the code.</p>

<p><img src="/images/posts/love-is-the-air/image1.png" alt="Arduino" /></p>

<p>Now that we have all, it is time to connect everything (Which is not a simple task since there is little information available on the internet about this).</p>

<p>The following table explains pretty well how to connect the module, and was obtained through trial and error&hellip;</p>

<p><img src="/images/posts/love-is-the-air/image15.png" alt="Pins-Module" /></p>

<p>Now, remember the issue of the four transmission channels that the box mentioned and the manual of the <strong>FCC</strong>?
Well, it turns out that it is not like that at all. Transmitting in a single channel we can send orders to the Drone, and it is not necessary to change and transmit on all four channels.</p>

<p>Below, some parts of the transmitter code and a brief explanation of the most important parts</p>

<p><img src="/images/posts/love-is-the-air/image7.png" alt="Sender-Arduino" /></p>

<p><strong>sender.c</strong> is developed in <strong>C</strong> and allows us to send orders to the Drone, as if it were the original controller. The most important thing to mention for the code is the definition of the pins <strong>CE</strong> and <strong>CSN</strong> of the module, which in this case are nine and ten. This is the definition of the address previously found and the channels to which we are going to transmit.</p>

<p><img src="/images/posts/love-is-the-air/image9.png" alt="Setup-Code-Arduino" /></p>

<p>The bauds are defined for the serial connection of the Arduino, and to be able to obtain debug information for our code. In addition to some of our own configurations of the module such as, for example <strong>CRC of 16 bytes</strong>.
Maximum transmission power and &ldquo;Bitrate&rdquo; of 250 KBPS, including the transmission channel and the size of payload.</p>

<p>With this transmitter and the lack of an association protocol between the original Drone and Controller, &ldquo;to hijack&rdquo; the drone is a matter of having a transmitter with more power and reach than the original!</p>

<h4 id="we-did-it"><strong>We did it!</strong></h4>

<h1 id="objective-3-the-camera">Objective 3: The camera</h1>

<p>To connect to the <strong>camera</strong>, an application that connects to the <strong>WI-FI Access Point</strong> created by the camera itself is necessary,and using our cell phone we can watch the video streaming, and take screenshots.</p>

<p>Now, if the idea is to &ldquo;hijack&rdquo; that video connection, let&rsquo;s look a bit at the Android application to see how it connects to the camera &hellip;</p>

<p>Decompiling the <strong>APK</strong> we found some things that caught our attention:</p>

<ol>
<li><p>Connections to a hardcoded IP: 192.168.1.1 the IP of the camera.</p></li>

<li><p>A URL with hardcoded credentials: <a href="http://192.168.1.1/request_av.cgi?user=admin&amp;pwd=" target="_blank">http://192.168.1.1/request_av.cgi?user=admin&amp;pwd=</a></p></li>

<li><p>A scan of ports for the camera shows us two open ports: <strong>80 and 2345</strong>.</p></li>
</ol>

<p>The manufacturer of the camera has published documentation and in it we found a way to enable the <strong>telnet</strong> service, making a request to the URL <a href="http://192.168.1.1/set_params.cgi?telnetd=1&amp;save=1&amp;reboot=1" target="_blank">http://192.168.1.1/set_params.cgi?telnetd=1&amp;save=1&amp;reboot=1</a></p>

<p>And when we do it &hellip;</p>

<p><img src="/images/posts/love-is-the-air/image13.png" alt="Root-Shell" /></p>

<p>Root Shell, quite simple &hellip;</p>

<p>We continued reading the documentation and found that using the URL
<a href="http://192.168.1.1/snapshot.cgi?user=admin&amp;pwd=" target="_blank">http://192.168.1.1/snapshot.cgi?user=admin&amp;pwd=</a></p>

<p>We can take a photo using the default credentials that we found in the <strong>APK</strong>.</p>

<p>And the video stream?</p>

<p>It is also in the documentation explained!</p>

<ol>
<li><p>First we request a stream ID: <a href="http://192.168.1.1/request_av.cgi?user=admin&amp;pwd=" target="_blank">http://192.168.1.1/request_av.cgi?user=admin&amp;pwd=</a></p></li>

<li><p>Then, we used that ID obtained previously to request the video stream:
<a href="http://192.168.1.1/videostream.cgi?user=admin&amp;pwd=&amp;stream=714546261" target="_blank">http://192.168.1.1/videostream.cgi?user=admin&amp;pwd=&amp;stream=714546261</a></p></li>
</ol>

<p><strong>And we have the video stream!</strong></p>

<p>Conclusions:</p>

<ul>
<li><p>We intercepted the telemetry of the Drone, we managed to &ldquo;hijack it&rdquo; along with its video stream.</p></li>

<li><p>We had several problems with the transmission. We solved it using a power bank to supply the peak of energy required by the transmission module, Arduino and C, to improve the transmission performance.</p></li>

<li><p>There is no security in the communication: neither encryption nor protocol of secure association. The one that has the transmitter of greater power basically gains control of the Drone.</p></li>
</ul>

<hr />

<h3 id="we-were-able-to-intercept-the-drone-s-telemetry-and-we-managed-to-hijack-it-along-with-the-video-stream"><strong>We were able to intercept the drone&rsquo;s telemetry and we managed to hijack it along with the video stream!</strong></h3>

<hr />

<p>It should be noted that when I started with this project <strong>I did not have knowledge</strong> about <strong>Radiofrequency</strong> nor about <strong>SDR</strong>. With curiosity and perseverance, and internet connection, you can achieve great things :)</p>

<p>Now, it&rsquo;s time for another project.</p>

<p>All the developed code available in: <a href="https://github.com/Ezequieltbh/SymaX5SW-Rx-Tx" target="_blank">https://github.com/Ezequieltbh/SymaX5SW-Rx-Tx</a></p>

<p>Slides of the talk:
<a href="https://github.com/Ezequieltbh/presentations/blob/master/Love%20is%20in%20the%20air_%20%20Reverse%20Engineering%20a%20shitty%20drone.pdf" target="_blank">Slides Github</a></p>

<hr />

<p>Translation into English:</p>

<p>Fabrizio Scaglione</p>

<p>Josh Mador</p>
]]></content>
        </item>
        
        <item>
            <title>Nsa Shadowbrokers leak: analyzing EPICHERO</title>
            <link>https://ezequieltbh.me/posts/2017/05/nsa-shadowbrokers-leak-analyzing-epichero/</link>
            <pubDate>Wed, 03 May 2017 00:00:00 +0000</pubDate>
            
            <guid>https://ezequieltbh.me/posts/2017/05/nsa-shadowbrokers-leak-analyzing-epichero/</guid>
            <description>On April 8th, 2017, a moderately well-known group known as ShadownBrokers released a password to decipher the file known as EQGRP-Auction-Files posted in medium.com.
A few hours later the Infosec community on social media (Twitter, Reddit, etc) was busy analyzing the leak.
This article is about the reverse engineering of the exploit found in the leak and to be a bit more specific about the exploit known as EPICHERO.</description>
            <content type="html"><![CDATA[

<p><img src="/images/posts/nsa-shadowbrokers-epichero/logo.jpg" alt="Logo" /></p>

<p>On April 8th, 2017, a moderately well-known group known as ShadownBrokers released a password to decipher the file known as <strong>EQGRP-Auction-Files</strong> posted in <a href="https://medium.com/@shadowbrokerss/dont-forget-your-base-867d304a94b1" target="_blank">medium.com</a>.</p>

<p>A few hours later the Infosec community on social media (Twitter, Reddit, etc) was busy analyzing the leak.</p>

<p>This article is about the reverse engineering of the exploit found in the leak and to be a bit more specific about the exploit known as <a href="https://github.com/x0rz/EQGRP/tree/33810162273edda807363237ef7e7c5ece3e4100/Linux/bin/epichero" target="_blank">EPICHERO</a>.</p>

<p><strong>EPICHERO</strong> is a <strong>RCE</strong> (zero-day) with <strong>ROOT</strong> privileges in <strong>Avaya Communication Manager</strong>. The vulnerability resides in the CGI <strong>/auth-cgi-bin/distUpgReq</strong> whose <strong>POST licfile</strong> parameter is vulnerable to <strong>Command Injection</strong>.</p>

<h2 id="vulnerable-product">Vulnerable Product</h2>

<p><strong>EPICHERO</strong>, according to the <a href="https://github.com/x0rz/EQGRP/blob/33810162273edda807363237ef7e7c5ece3e4100/Linux/doc/user.tool.epichero.COMMON" target="_blank">documentation</a> found in the leak is a zero day (at the moment there isn&rsquo;t a public CVE that references the bug), RCE with privileges of <strong>ROOT</strong> in <strong>Avaya call server</strong> for the version <a href="https://support.avaya.com/products/P0292/s8710-server" target="_blank">S8710-013-00.0.340.3</a>.</p>

<p>&lsquo;Avaya call server&rsquo; is a generic name, which according to the <a href="https://downloads.avaya.com/css/P8/documents/100017348" target="_blank">documentation</a> (Page 7, Paragraph 1.1) refers to its <a href="https://support.avaya.com/products/P0001/avaya-aura-communication-manager/6.0.x" target="_blank">hardware Appliance</a>, that runs the software Avaya Communication Manager.<br />
Because of this it was impossible to try it in order to really verify that the exploit is functional and to specify all the vulnerable versions.</p>

<p>The impact of the vulnerability beyond being a code execution is more than remarkable, the S8710 server is a commercial server for routing voice, data and video.<br />
Because of this, compromising this server could sniff the routed traffic and as a consequence, record SIP calls, redirect them or exploit any known techniques against a SIP server.</p>

<p>Beyond that, given the large scope of the leak and his source (NSA) it is posible that we&rsquo;re a little ahead of an exploit that is fully operational.</p>

<h2 id="first-look">First Look</h2>

<p>A quick look at the exploit using <strong>&lsquo;file&rsquo;</strong> gives us the following information:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">eh.1.1.0.0: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.2.5, not stripped</code></pre></div>
<p>It is a ELF binary which wasn&rsquo;t stripped. This made it quite a bit easier to do reversing on it to maintain names of functions and global variables!.</p>

<p>Using <strong>&lsquo;strings&rsquo;</strong>, we get to two pretty interesting strings&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">GCC: (GNU) 3.2 20020903 (Red Hat Linux 8.0 3.2-7)</code></pre></div>
<p>Versions for GCC and OS used by the exploit writer.<br />
and the most important&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">TYPE=licxfer&amp;ftp=%s&amp;source=/var/home/ftp/pub&amp;version=NA&amp;licfile=;echo &#34;</code></pre></div>
<h2 id="functionalities">Functionalities</h2>

<p><img src="/images/posts/nsa-shadowbrokers-epichero/exploit_arguments.png" alt="Exploit-Arguments" /></p>

<p>As you can see in the image the exploit permits:</p>

<ul>
<li>Specify the name of the log file.</li>
<li>Save MAC times of the modified files</li>
<li>Indicate a script as a payload.</li>
<li>Run the last one as Root.</li>
<li>Do a scan for the version of the server.</li>
</ul>

<h2 id="reversing-the-exploit">Reversing the exploit</h2>

<p>We start reversing the main function, in a principle we only see a switch for parse the parameters.</p>

<p><img src="/images/posts/nsa-shadowbrokers-epichero/IDA-1.png" alt="IDA-1" /></p>

<p>Off the bat we start to notice something in particular: a strong error check.</p>

<p>For each function called in the exploit you can check its return code and in the case that a error came up a call to &lsquo;cleanup&rsquo; is done. This is a function that cleans all the buffers used and/or open sockets permitting a clean way to close the exploit.</p>

<p><img src="/images/posts/nsa-shadowbrokers-epichero/cleanup_function.png" alt="Cleanup-function" /></p>

<p>This, together with the intensive log of each variable, shows that we are really see a professional exploit and not a simple PoC. You can really tell that someone put a lot of time into it to make it usable for pentesters beyond just the exploit writer.</p>

<p>We continued analyzing the main and some blocks that got our attention.</p>

<p><img src="/images/posts/nsa-shadowbrokers-epichero/cert_key.png" alt="Private-key" /></p>

<p><strong><em>We have a certificate in PEM format and a private key!</em></strong></p>

<p>But why is this here?<br />
This is the information for the certificate, together with a match check between the certificate and the private key&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">Common Name: 130.62.9.101
Organization: Avaya Inc.
Organization Unit: s8700
Country: US
Valid From: May 17, 2006
Valid To: May 9, 2036
Issuer: Avaya Call Server, Avaya Inc.
Serial Number: 5024b4b220060517120931</code></pre></div>
<p>The certificate is signed by Avaya Inc. which corresponds with the <a href="https://downloads.avaya.com/elmodocs2/s8700/83help/sec_cert_ovr.htm#Types%20of%20security%20certificates" target="_blank">documentation</a> of the product which indicates that the certificates are self-signed by Avaya. Additionally, this was created for <strong>130.62.9.101</strong>, probably one of the <strong>targets of the NSA</strong> for this exploit.</p>

<p><img src="/images/posts/nsa-shadowbrokers-epichero/certificate.png" alt="Certificate" /></p>

<p>Ok, but how we use that? Because the certificate is self-signed by Avaya, there haven&rsquo;t the CA in any trusted store of an operating system or browser of your choice. As a result it&rsquo;s necessary to add the certificate to that store to be able to establish a HTTPS connection that the exploit needs.</p>

<p><img src="/images/posts/nsa-shadowbrokers-epichero/ssl_ctx_cert.png" alt="IDA-SSL" /></p>

<p>But besides adding the <strong>certificate to the store</strong> does it add the <strong>private password</strong> to the Ctx object?<br />
That&rsquo;s right&hellip; this is due to the fact that there is a function named &lsquo;client_comm&rsquo; which is called one time from the main. This is responsible for creating the necessary SSL_CTX object to establish the SSL connection and check that the function of the client (likewise the server), works correctly in the exploit. Do you remember the strong errors check?</p>

<p>One of the exploit&rsquo;s functions is act as a scanner to be able to check the version of the Appliance. Lets check out how you can do that&hellip;</p>

<p>The function <strong>&lsquo;version_scan&rsquo;</strong> builds line to line a <strong>Request POST HTTPS</strong> to <strong>/auth-cgi-bin/distUpgReq</strong> with the following parameters:</p>

<p><img src="/images/posts/nsa-shadowbrokers-epichero/version.png" alt="IDA-VERSION" /></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">TYPE=query&amp;ftp=[VICTIM_IP]&amp;source=/var/home/ftp/pub&amp;version=NA</code></pre></div>
<p>Parse the response looking for the substrings:</p>

<ul>
<li>version=</li>
<li>patch=</li>
<li>sid=</li>
<li>mid=</li>
</ul>

<p>After it looks for a &lsquo;\n&rsquo; at the end of those substrings, its starts printing in the console (in verbose mode) the result of each substring searched.</p>

<p><strong><em>We finally got the &lsquo;exploit&rsquo; function!</em></strong></p>

<p>In this function we found quite a surprise. There&rsquo;s <strong>dead code</strong>&hellip; code that doesn&rsquo;t execute ever as a result of the two global variables that don&rsquo;t have instances at any time during the exploit.<br />
These global variables are named &lsquo;BinFile&rsquo; and &lsquo;AscFile&rsquo; and later on we will be able to see the results of search all the instructions that refers to them in the exploit.</p>

<p><img src="/images/posts/nsa-shadowbrokers-epichero/BinFile_missing.png" alt="IDA-BinFile-Missing" /></p>

<p>It doesn&rsquo;t set any values&hellip;</p>

<p><img src="/images/posts/nsa-shadowbrokers-epichero/AscFile_missing.png" alt="IDA-AscFile-Missing" /></p>

<p>Same case here&hellip;</p>

<p><img src="/images/posts/nsa-shadowbrokers-epichero/seteo_indirecto.png" alt="IDA-AscFile-Missing" /></p>

<p>You can&rsquo;t set it using eax either&hellip;</p>

<p>The best theory that we came up with about this, is that the exploit writer due to lack of time refactor the sending of files and execution, forgetting about this block of code and or leaving it alone because he was never going to be able run it suceessfully.</p>

<p><img src="/images/posts/nsa-shadowbrokers-epichero/basic_blocks_deads.png" alt="IDA-Basic-Blocks-Dead" /></p>

<p>While, putting this aside for a second, the exploit follows this path.</p>

<ol>
<li>Create 2 random paths in /tmp/%d and another in /tftpboot/%d. Replacing %d with a random number.</li>
<li>Appear dead code inside of <strong>if(BinFile)</strong> and <strong>if(AscFile)</strong>, and as we saw, this will not ever run.</li>
</ol>

<p>A loop that reads each 1024 bytes of a specified payload from a file, to be encoded with URL encode.</p>

<p>If it is the first line read and if it asked for root privileges for the script file:</p>

<ul>
<li><p>It makes a command that moves everything in <strong>/tftpboot/%random_number</strong> (a backup) to <strong>/opt/ws/%original_name/</strong> webupgrade (It&rsquo;s original site) and eliminates this backup.</p></li>

<li><p>It concates to a buffer, the command of the payload read and after the command from the previous bridge.</p></li>
</ul>

<p>If it isn&rsquo;t the first line read:</p>

<ol>
<li>We copied this line of the payload to the buffer.</li>
</ol>

<p>When this buffer is full (&gt; 724 ) in this latter iteration of the loop.</p>

<ul>
<li>It makes use of <strong>snd_n_append sending</strong> the saved command in the previous buffer and it saves everything in the first random path in <strong>/tmp</strong>, which we will call <strong>path_random1</strong>.</li>
</ul>

<p>This occurs in an infinite loop until it finishes reading the payload script of the user. Here is when everything happens&hellip;</p>

<ol>
<li>If there was a pending command about to send, it is sent using <strong>snd_n_append</strong>.</li>
<li>Build a command that erases the two random paths created (<strong>path_random1</strong> and <strong>path_random2</strong>) and this is written in <strong>path_random1</strong>.</li>
<li>In <strong>path_random2</strong> it writes a command that runs the <strong>path_random1</strong> file redirecting the streams to a <strong>/dev/null</strong>.</li>

<li><p>If the user asked for <strong>Root</strong> priveleges:</p>

<ul>
<li>It saves the MAC of all the files and directories in <strong>/opt</strong>. Additionally, it changes it&rsquo;s MAC to that instant.</li>
<li>The same with <strong>tftpboot/</strong></li>
<li>The same goes for <strong>/opt/ws/</strong></li>
<li>It makes a link of each file and directory of <strong>/opt/ws/*/webupgrade</strong> (except the links) to the <strong>tftpboot</strong> path.</li>

<li><p>It runs:</p>

<pre><code>sudo /opt/ws/webinstall modifyFileEntry /opt/ws/webupgrade &quot;.&quot; &quot;/opt/ws/functions | . %path_random2 | exit
</code></pre></li>

<li><p>It runs:</p>

<pre><code>sudo /opt/ws/webupgrade
</code></pre></li>
</ul></li>

<li><p>If the user didn&rsquo;t ask for <strong>Root</strong>: It runs directly the <strong>%path_random2</strong>.</p></li>

<li><p>If the user proportions the files whose MAC wants to change, the exploit sets the MAC to real-time for each file.</p></li>
</ol>

<p>Great&hellip; Now we have the execution of the code and all the functionalities of the exploit pretty reasonably explained.</p>

<p>A simple way, the <strong>%path_random2</strong> file to end up running <strong>%path_random1</strong> (which contains the payload of the user). Additionally, the necessary commands are run in order to change the MAC for files and directories like as was done for commands to gain <strong>ROOT</strong> privileges.<br />
This is possible using <strong>sudo</strong>, because the user that runs the vulnerable code has access for the <strong>sudo</strong> use. This is a bad security practice for users that run services such as HTTP servers.<br />
For the binaries run in /opt/ws, due to not have access to the software and on the internet there is documentation for them we can&rsquo;t specify anything.</p>

<p>Great! we already have everything, but <strong>which one is the vulnerability</strong>?!</p>

<p>The vulnerability is exploited in the <strong>bld_n_snd_http</strong> function. Look for yourselves&hellip;</p>

<p><img src="/images/posts/nsa-shadowbrokers-epichero/rsz_shell_injection.png" alt="Rsz-Shell-Injection" /></p>

<p>&lsquo;aTypeLicxFerF_7&rsquo; is the string format that creates the POST parameters which are sent in the <strong>Request POST</strong> via <strong>HTTPS</strong> to a <strong>CGI</strong> in <strong>/auth-cgi-bin/distUpgReq</strong>.</p>

<p>Can you see the <strong>;echo</strong> in the <strong>licfile</strong> parameter? This is clearly a <strong>Command Injection</strong>, the <strong>CGI</strong> concate <strong>licfile</strong> parameter in the command that will be run in a shell. This is the way the NSA&rsquo;s exploit achieved code execution.<br />
The function <strong>snd_n_append</strong> mentioned earlier, that wrote a file in the remote system is simply a Wrapper of this last function.<br />
It reads the sent files by parameters and after it calls <strong>bld_n_snd_http</strong> passing as a parameter a string with all POST parameters of this CGI.</p>

<p>To wrap things up, I would like to mention that there is a script in the leak <a href="https://github.com/x0rz/EQGRP/blob/master/Linux/bin/epichero/cleanup.script" target="_blank">/Linux/bin/epichero/cleanup.script</a> which does an inspection for the logs of apache and erases any trace of the exploit in a pretty detailed way. On top of this, it restores the backups of the directory /opt/ws and eliminates the file <strong>/var/iglut/upg_status.dat</strong>.</p>

<p>Lastly, an interesting piece of information in the same directory of this script is the reverse shell used by NSA and that contains the address <strong>IPv4 206.210.129.25 (Amphitheater Public Schools)</strong>.<br />
It could be possible that this is one of the servers hacked by NSA to hide traces of its Shells and exploits.</p>

<h2 id="conclusion">Conclusion</h2>

<p>The exploit was developed with a lot of protective error checking. Features against forensic analysis such as changing the MAC of the files and directories in addition to a strong log of each action done by the exploit. All of this shows the huge amoung of effort dedicated to creating the most effective and &ldquo;sneaky&rdquo; exploit possible to avoid tipping off any alerts as was done, also in the obtention and use of violated servers previously to use how receivers of its Reverse Shells an be more stealth.</p>

<h2 id="credits">Credits</h2>

<p>Author:<br />
Ezequiel Tavella</p>

<p>Contributions:<br />
Josh Mador<br />
Federico Kirschbaum</p>

<p><strong><em>Note: Originally published in <a href="https://blog.infobytesec.com/2017/05/nsa-shadowbrokers-leak-analyzing.html" target="_blank">Infobyte Blog</a></em></strong></p>
]]></content>
        </item>
        
        <item>
            <title>[ES] Cybercamp 2015 CTF: Criptografia challenge</title>
            <link>https://ezequieltbh.me/posts/2015/08/es-cybercamp-2015-ctf-criptografia-challenge/</link>
            <pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate>
            
            <guid>https://ezequieltbh.me/posts/2015/08/es-cybercamp-2015-ctf-criptografia-challenge/</guid>
            <description>El dia 17 de julio inicio el CTF 2015 de Cybercamp, el mismo era del estilo jeopardy y constaba de retos de criptografia, forensica, exploiting, web y reversing.
En mi caso termine en el puesto 44, tan solo a 4 de clasificar, una lastima no tener mas tiempo para dedicarlo a los retos.
Empezamos con uno de criptografia!
Descripcion: Se ha logrado interceptar dos criptogramas denominados C1 y C2, asi como sus correspondientes textos planos M1 y M2.</description>
            <content type="html"><![CDATA[<p>El dia 17 de julio inicio el CTF 2015 de Cybercamp, el mismo era del estilo jeopardy y constaba de retos de criptografia, forensica, exploiting, web y reversing.</p>

<p>En mi caso termine en el puesto 44, tan solo a 4 de clasificar, una lastima no tener mas tiempo para dedicarlo a los retos.</p>

<p>Empezamos con uno de criptografia!</p>

<p>Descripcion: Se ha logrado interceptar dos criptogramas denominados C1 y C2, asi como sus correspondientes textos planos M1 y M2. Se desea generar C3, el cual es el criptograma correspondiente a M3. Se sabe que el cifrado utilizado es DES-ECB.</p>

<p>Datos:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">M1 = INGRESAR ARACELI GONZALEZ 1.000
M2 = INGRESAR MANUEL FERNANDEZ 10.000
C1 = C4 41 ED E3 5C 67 4D D5 ED 61 A5 3F 72 1F E3 F4 9F 7E D0 56 6C 93 DE 1B 89 80 8E D0 95 75 C7 66
C2 = C4 41 ED E3 5C 67 4D D5 49 89 15 5D 3E 6B 2A A8 69 DF C0 30 B6 85 DC DE 82 9D EF 5D EB A1 D8 C1
M3 a cifrar: INGRESAR ARACELI GONZALEZ 10.000</code></pre></div>
<p>Como pueden ver a primera vista ya hay algo extraño, los primeros bytes de los dos criptogramas se repiten lo que nos hace pensar ya en un problema de confidencialidad como minimo.</p>

<p>Debido a que no hay ningun dato que nos permita obtener la Key de cifrado y que el algoritmo DES no es un cifrado reversible, hay que investigar un poco mas sobre ECB.</p>

<p>Con una busqueda rapida en Wikipedia nos encontramos con que este modo de operacion por bloques <a href="https://es.wikipedia.org/wiki/Cifrado_por_bloques#Electronic_Code-Book_.28ECB.29" target="_blank">ECB ( Electronic Code-book)</a>, tiene dos problemas: confidencialidad y replay attack.</p>

<p>El primero lo pudimos ver antes, si los bloques son iguales, sus textos planos coinciden.</p>

<p>El segundo es un ataque que se basa en el principio basico de este modo ECB: cada <strong>bloque se cifra independientemente</strong> del otro o de otra cosa. Con esto si necesitamos construir un criptograma nuevo, si tenemos sus textos planos y criptogramas correspondientes, tan solo hay que unir los bloques correspondientes.</p>

<p>Eso es lo que exactamente necesitamos para obtener el flag, asi que vamos a dividir los criptogramas en bloques de 8 bytes y obtenemos&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">M1 = i  n  g  r  e  s  a  r |  a  r  a  c  e  l  i   |    g  o  n  z  a  l  e | z     1  .  0  0  0  
C1 = C4 41 ED E3 5C 67 4D D5| ED 61 A5 3F 72 1F E3 F4| 9F 7E D0 56 6C 93 DE 1B| 89 80 8E D0 95 75 C7 66
C2 = C4 41 ED E3 5C 67 4D D5| 49 89 15 5D 3E 6B 2A A8| 69 DF C0 30 B6 85 DC DE| 82 9D EF 5D EB A1 D8 C1
M2 =  i  n  g  r  e  s  a  r|     m  a  n  u  e  l   |  f  e  r  n  a  n  d  e| z     1   0  .  0  0  0 </code></pre></div>
<p>Como podemos ver el primer bloque coincide en los dos criptogramas y ahora ya sabemos por que, para obtener el flag simplemente tomamos de C1 los primeros tres bloques ( &ldquo;ingresar araceli gonzale&rdquo;) y de C2 tomamos el ultimo bloque( &ldquo;z 10.000&rdquo;).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">C3 : C441EDE35C674DD5ED61A53F721FE3F49F7ED0566C93DE1B829DEF5DEBA1D8C1</code></pre></div>
<p>Con esto obtenemos el criptograma correspondiente el cual es valido y es nuestra flag!</p>

<p>Las recomendacion para evitar estos problemas son:</p>

<ol>
<li><p>No utilizar DES, es un algoritmo que se a probado que es vulnerable, utilizar AES el cual es su sucesor.</p></li>

<li><p>No utilizar ECB, debido a que tiene fallos de confidencialidad y es vulnerable al replay attack, utilizar otros modos como CBC, CFB, OFB y CTR.</p></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>[ES] Desafío ESET 29: Write Up</title>
            <link>https://ezequieltbh.me/posts/2015/03/es-desaf%C3%ADo-eset-29-write-up/</link>
            <pubDate>Fri, 20 Mar 2015 00:00:00 +0000</pubDate>
            
            <guid>https://ezequieltbh.me/posts/2015/03/es-desaf%C3%ADo-eset-29-write-up/</guid>
            <description>WeLiveSecurity es un blog sobre seguridad informatica administrado por la comunidad de analistas de seguridad que trabajan para ESET, si el famoso antivirus!
Cada cierto tiempo en este blog presentan retos en los que cualquiera puede participar, divertirse un rato, aprender y ganar algun premio. Hoy presentaron el reto 29 el cual se basa en buscar un flag.
Entramos al post del blog y nos encontramos con un Zip para descargar, pero nos avisan que el mismo tiene una contraseña la cual podemos encontrar si es que logramos resolver el problema en la siguiente imagen:</description>
            <content type="html"><![CDATA[<p><a href="http://www.welivesecurity.com/" target="_blank">WeLiveSecurity</a> es un blog sobre seguridad informatica administrado por la comunidad de analistas de seguridad que trabajan para ESET, si el famoso antivirus!</p>

<p>Cada cierto tiempo en este blog presentan retos en los que cualquiera puede participar, divertirse un rato, aprender y ganar algun premio. Hoy presentaron el reto 29 el cual se basa en buscar un flag.</p>

<p>Entramos al <a href="https://www.welivesecurity.com/la-es/2015/03/20/desafio-eset-29-encuentra-accion-maliciosa/" target="_blank">post</a> del blog y nos encontramos con un <a href="http://www.welivesecurity.com/wp-content/uploads/2015/03/Desafio_-_29.zip" target="_blank">Zip</a> para descargar, pero nos avisan que el mismo tiene una contraseña la cual podemos encontrar si es que logramos resolver el problema en la siguiente imagen:</p>

<p><img src="/images/posts/desafio-eset-29/CodigoQR2.png" alt="Codigo-Qr" /></p>

<p>Tenemos una imagen QR, asi que volvemos a utilizar nuestra herramienta online para decodificar su contenido y nos encontramos con:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">RG9Nb3Jl==</code></pre></div>
<p>Debido a los dos signos <strong>&rdquo;=&rdquo;</strong> del final, nos damos cuenta rapidamente que se trata de un string en <strong>base 64</strong>, decodificandolo terminamos obteniendo la clave:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">DoMore</code></pre></div>
<p>En este punto tenemos una carpeta llamada <strong>&ldquo;Desafio_-_29&rdquo;</strong> la cual contiene un archivo llamado <strong>&ldquo;Desafio__29.exe&rdquo;</strong> asi que vamos a investigar un poco ese ejecutable.</p>

<p>El primer paso es extraer todos los strings que este contiene por lo que utilizando la herramienta <strong>&ldquo;strings.exe&rdquo;</strong> de <strong>SysInternals</strong> terminamos obteniendo entre otras cosas</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">8fda2e04=&#34;Archivo auto-extraible WinRAR&#34;</code></pre></div>
<p>Ok al parecer tenemos un ejecutable que en realidad es un un archivo <strong>SFX</strong> generado con <strong>WinRAR</strong>, el siguiente paso es abrirlo y ver cuales son sus ordenes de extraccion junto con su contenido.</p>

<p><img src="/images/posts/desafio-eset-29/2015-03-20 18_25_28-Desafio__29.exe.jpg" alt="File-And-Comment" /></p>

<p>Adentro de este <strong>SFX</strong> tenemos un archivo sin extension y un comentario que indica que se realizara la extraccion silenciosamente <strong>(Silent = 1)</strong> por lo que no veremos ninguna ventana al momento de realizarse la descompresion, tambien vemos que la ruta donde se hara la misma es en <strong>&ldquo;C:\WINDOWS\Temp&rdquo;</strong>.</p>

<p>Ahora podemos ejecutar el exe con seguridad de que no se nos paso nada, y buscar ese archivo <strong>&ldquo;Desafio__29&rdquo;</strong> para identificar su contenido gracias a sus primeros bytes, los cuales son:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">d0 cf 11</code></pre></div>
<p>Un poco de Google y nos encontramos con la respuesta: <strong>Microsoft Office Document</strong>.</p>

<p>Renombramos el archivo a <strong>&ldquo;Desafio__29.doc&rdquo;</strong> por probar y acertamos&hellip;</p>

<p><img src="/images/posts/desafio-eset-29/2015-03-20 18_40_56-Desafio__29.doc [Modo de compatibilidad] - Word.jpg" alt="Altas-Cartas" /></p>

<p>A simple vista no hay ningun flag, pero ahora mismo tenemos un archivo <strong>Word</strong> y un reto de una compania de anti malware, donde uno puede guardar malware en un archivo de <strong>Office</strong>?&hellip;</p>

<p>En los Macros!!</p>

<p><img src="/images/posts/desafio-eset-29/2015-03-20 18_45_41-Microsoft Visual Basic para Aplicaciones - Desafio__29 .jpg" alt="Visual-Basic-Macro" /></p>

<p>Vamos a analizar un poco este codigo:</p>

<p>En el principio (el cual no esta en la imagen), podemos observar como se declaran las funciones <strong>&ldquo;CreateThread&rdquo;</strong>, <strong>&ldquo;VirtualAlloc&rdquo;</strong>, <strong>&ldquo;RtlMoveMemory&rdquo;</strong> lo cual nos hace sospechar de que en algun lugar hay codigo ejecutable que sera cargado en memoria gracias al uso de estas funciones anteriormente mencionadas.</p>

<p>Si nos vamos al final del codigo podemos ver <strong>&ldquo;Workbook_Open()&rdquo;</strong>, este es un evento que se ejecuta al iniciar el documento siempre y cuando los macros esten activados, el mismo como se puede observar llama a la funcion <strong>Auto_Open</strong>.</p>

<p>Analizando <strong>Auto_Open</strong>:</p>

<ul>
<li><p><strong>&ldquo;Array&rdquo;</strong> guarda el codigo ejecutable, codificado en decimal, que sospechabamos que habia.</p></li>

<li><p><strong>VirtualAlloc</strong> reserva memoria con el tamaño justo (gracias a <strong>UBound</strong>) para almacenar el <strong>Array</strong>.</p></li>

<li><p><strong>RtlMoveMemory</strong> realiza movimientos de memoria para colocar la shellcode en memoria de manera correcta, toma como destino a <strong>&ldquo;Ffhzpyadi + Spcwl&rdquo;</strong> y como origen a <strong>Xosacrosk</strong>, siempre realizando movimientos de 1 byte. Por lo que tenemos basicamente en este bucle, un decoder!</p></li>

<li><p><strong>CreateThread</strong> crea un nuevo hilo de ejecucion ejecutando ese codigo.</p></li>
</ul>

<p>En este punto convencido de que el flag debe estar en ese shellcode, lo que voy a hacer es cargar en memoria ese shellcode y localizarlo a traves de <strong>&ldquo;Ffhzpyadi&rdquo;</strong>.</p>

<p>Para esto agrego un punto de inspeccion a la variable <strong>&ldquo;Ffhzpyadi&rdquo;</strong> y ejecuto el codigo hasta la linea de <strong>CreateThread</strong>. Ahora mismo el shellcode deberia estar ya en memoria y para ubicarlo miro el valor de la variable <strong>&ldquo;Ffhzpyadi&rdquo;</strong> el cual es <strong>&ldquo;193003520&rdquo;</strong>, pasando a hexadecimal obtenemos <strong>&ldquo;0xb810000&rdquo;</strong>.</p>

<p>Abrimos <strong>Inmunity Debugger</strong> y nos vamos a ver la direccion de memoria que obtuvimos antes, al final de todo nos encontramos con el <strong>FLAG!</strong></p>

<p><strong>Flag_is_EnjoySaferTechnology</strong></p>

<p>Y hasta aca llega el reto!</p>
]]></content>
        </item>
        
        <item>
            <title>[ES] CTF InfosecInstitute - Parte 3</title>
            <link>https://ezequieltbh.me/posts/2015/03/es-ctf-infosecinstitute-parte-3/</link>
            <pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
            
            <guid>https://ezequieltbh.me/posts/2015/03/es-ctf-infosecinstitute-parte-3/</guid>
            <description>Ultimo post sobre el CTF de InfosecInstitute, esta vez con retos mas complicados&amp;hellip;
Level 11:
Al entrar en el reto nos encontramos con una imagen que nos indica que hay otro sonido de nuevo, pero mas abajo podemos ver que no hay ningun sonido sino una imagen del logo de php.
Debido a que en el reto anterior estaba esa imagen lol.gif, descargo php-logo-virus.jpg ya que me parece sospechosa y ejecutando:</description>
            <content type="html"><![CDATA[<p>Ultimo post sobre el <strong>CTF</strong> de <strong>InfosecInstitute</strong>, esta vez con retos mas complicados&hellip;</p>

<p>Level 11:</p>

<p><img src="/images/posts/ctf-infosecinstitute-3/2015-03-15 15_56_15-.jpg" alt="Level-11-10" /></p>

<p>Al entrar en el reto nos encontramos con una imagen que nos indica que hay otro sonido de nuevo, pero mas abajo podemos ver que no hay ningun sonido sino una imagen del logo de php.</p>

<p>Debido a que en el reto anterior estaba esa imagen <strong>lol.gif</strong>, descargo <strong>php-logo-virus.jpg</strong> ya que me parece sospechosa y ejecutando:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">strings php-logo-virus.jpg</code></pre></div>
<p>Me encuentro con:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">infosec_flagis_aHR0cDovL3d3dy5yb2xsZXJza2kuY28udWsvaW1hZ2VzYi9wb3dlcnNsaWRlX2xvZ29fbGFyZ2UuZ2lm</code></pre></div>
<p>Parece ser el flag, pero en realidad la ultima parte esta codificada en <strong>base 64</strong>, el no tener el <strong>&rdquo;=&rdquo;</strong> o <strong>&rdquo;==&rdquo;</strong> no significa que no sea <strong>base 64</strong> ya que el mismo se utiliza como <a href="https://en.wikipedia.org/wiki/Base64#Padding" target="_blank">padding</a> y no siempre es necesario.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">http://www.rollerski.co.uk/imagesb/powerslide_logo_large.gif</code></pre></div>
<p>Si vemos la imagen podemos encontrar la palabra powerslide que es la ultima parte de nuestro flag!</p>

<p><strong>Flag: infosec_flagis_powerslide</strong></p>

<p>Level 12:</p>

<p><img src="/images/posts/ctf-infosecinstitute-3/2015-03-15 16_16_34.jpg" alt="Level-12-Css" /></p>

<p>Misma imagen que el reto 1 por lo que no encontraremos nada ahi, asi que hay que buscar en el codigo fuente de la web. Luego de un poco de busqueda nos encontramos con:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-HTML" data-lang="HTML">&lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;css/custom.css&#34;</span>&gt;</code></pre></div>
<p>Eso no es un color me parece, pero si es hexadecimal!</p>

<p><strong>Flag: infosec_flagis_heyimnotacolor</strong></p>

<p>Level 13:</p>

<p><img src="/images/posts/ctf-infosecinstitute-3/2015-03-15 16_22_43-.jpg" alt="Level-13-Reto-Perdido" /></p>

<p>Parece que el admin perdio el reto :p, nuestro objetivo es buscarlo asi que luego de probar algunas combinaciones comunes de nombres, la buena es:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">http://ctf.infosecinstitute.com/levelthirteen.php.old</code></pre></div>
<p>Si miramos el codigo fuente de esta nueva pagina veremos:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-HTML" data-lang="HTML">&lt;<span style="color:#f92672">p</span>&gt;Do you want to download this mysterious file?&lt;/<span style="color:#f92672">p</span>&gt;
 
   &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;misc/imadecoy&#34;</span>&gt;
     &lt;<span style="color:#f92672">button</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;btn&#34;</span>&gt;Yes&lt;/<span style="color:#f92672">button</span>&gt;
   &lt;/<span style="color:#f92672">a</span>&gt;</code></pre></div>
<p>Por lo que descargamos ese archivo <strong>imadecoy</strong> y mirandolo con un editor hexadecimal podemos ver que sus primeros tres bytes son <a href="http://www.filesignatures.net/index.php?page=search&amp;search=D4C3B2A1&amp;mode=SIG" target="_blank">d4 c3 b2</a>, los cuales son los bytes iniciales de un <strong>Pcap</strong> (Otra captura de red si).</p>

<p>Utilizando <strong>Wireshark</strong> para abrirlo se puede ver que hay varias conexiones <strong>HTTP</strong>, por lo que directamente vamos a <strong>&ldquo;Export Objects -&gt; HTTP&rdquo;</strong> y vemos todo lo que <strong>Wireshark</strong> pudo identificar en la captura.</p>

<p>Al parecer utilizaron <strong>&ldquo;Simple Vulnerable App&rdquo;</strong> desarrollado por <strong>&ldquo;Jay Turla, @shipcod3&rdquo;</strong> para realizar este reto, entre todos los objetos vemos uno llamado <strong>HoneyPY.PNG</strong> que contiene nuestro flag!</p>

<p><strong>Flag: infosec_flagis_morepackets</strong></p>

<p>Level 14:</p>

<p><img src="/images/posts/ctf-infosecinstitute-3/2015-03-15 16_41_22-.jpg" alt="Level-14-SQL-Dump" /></p>

<p>Tenemos otro archivo para descargar y en la primera linea ya nos damos cuenta de que va este reto, tenemos una base de datos <strong>SQL</strong> que fue dumpeada.</p>

<p>Al parecer esa base de datos contenia una instalacion de <strong>Wordpress</strong> por lo que en principio uno piensa que el flag puede llegar a estar en algun hash de alguna contraseña, pero eso requeriria de bastante tiempo para crackearlo.</p>

<p>Descartado los hashes nos ponemos a buscar informacion que resulte sospechosa y buscando un poco nos encontramos con:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">--
-- Dumping data for table `friends`
--
 
INSERT INTO `friends` (`id`, `name`, `address`, `status`) VALUES
(102, &#39;Sasha Grey&#39;, &#39;Vatican City&#39;, &#39;Active&#39;),
(101, &#39;Andres Bonifacio&#39;, &#39;Tondo, Manila&#39;, &#39;Active&#39;),
(103, &#39;lol&#39;, &#39;what the???&#39;, &#39;Inactive&#39;),
(104, &#39;\\u0069\\u006e\\u0066\\u006f\\u0073\\u0065\\u0063\\u005f\\u0066\\u006c\\u0061\\u0067\\u0069\\u0073\\u005f\\u0077\\u0068\\u0061\\u0074\\u0073\\u006f\\u0072\\u0063\\u0065\\u0072\\u0079\\u0069\\u0073\\u0074\\u0068\\u0069\\u0073&#39;, &#39;annoying&#39;, &#39;0x0a&#39;);</code></pre></div>
<p>En el registro con <strong>id 104</strong> podemos ver que su &ldquo;nombre&rdquo; es un string en unicode ( \u te permite identificar unicode claramente), decodificandolo nos encontramos con el flag!</p>

<p><strong>Flag: infosec_flagis_whatsorceryisthis</strong></p>

<p>Level 15:</p>

<p>Ultimo y mas complicado reto.</p>

<p><img src="/images/posts/ctf-infosecinstitute-3/2015-03-15 16_55_12.jpg" alt="Level-15-Command-Injection" /></p>

<p>Como podemos ver lo que tenemos es un campo que nos permite ingresar texto sin restricciones y que luego es procesado por el servidor usando <strong>PHP</strong> para ejecutar en el sistema el comando <strong>dig</strong> mas lo que nosotros hayamos ingresado en ese campo, claro ejemplo de <strong>Command Injection</strong>.</p>

<p>Para explotar este fallo simplemente en el campo escribimos</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">google.com;ls -lah</code></pre></div>
<p>Con esto la salida que nos va a devolver va a ser la de <strong>&ldquo;dig google.com&rdquo;</strong> y ademas la salida del comando <strong>&ldquo;ls -lah&rdquo;</strong> ya que el <strong>&rdquo;;&rdquo;</strong> en sistemas <strong>GNU/Linux</strong> funciona como indicador de que viene otro comando que debera ser ejecutado.</p>

<p><img src="/images/posts/ctf-infosecinstitute-3/2015-03-15 17_02_13.jpg" alt="Level-15-Command-Injection-Exploit" /></p>

<p>Como se puede ver en la imagen en el mismo directorio hay un archivo <strong>.hey</strong> el cual contiene</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">Miux+mT6Kkcx+IhyMjTFnxT6KjAa+i6ZLibC</code></pre></div>
<p>Al parecer tenemos un texto codificado, intentando con varios cifrados encontramos el correcto: <a href="http://k4.cba.pl/dw/crypo/tools/eng_atom128c.html" target="_blank">ATOM-128</a></p>

<p><strong>Flag: infosec_flagis_rceatomized</strong></p>

<p>Bonus:</p>

<p>En el reto 15 como vemos hay un <strong>Command Injection</strong> que permite ejecutar comandos en el sistema operativo directamente, en competencias <strong>CTFs</strong> como esta normalmente estos retos estan muy controlados y limitados los comandos que uno puede ejecutar pero esto no es asi en este <strong>CTF</strong>.</p>

<p>He reportado este fallo con 2 emails a los organizadores pero hasta este momento no he tenido respuesta, asi que decidi publicarlo aca.</p>

<p>El fallo consiste en que no se limitan los comandos posibles a ejecutar por lo que uno puede hacer&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">google.com;uname -a</code></pre></div>
<p>Y obtener&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">Linux ip-1XX-3X-3X-XX 3.13.0-44-generic #73-Ubuntu SMP Tue Dec 16 XX:XX:XX UTC 2014 x86_64 x86_64 x86_64 GNU/Linux</code></pre></div>
<p>Y asi con otros comandos como <strong>cat /etc/passwd</strong>, id y cualquiera que pueda ser ejecutado con los privilegios de <strong>&ldquo;www-data&rdquo;</strong>.</p>

<p>Espero que los organizadores arreglen esto lo mas rapido posible.</p>

<p>Editado: He recibido respuesta por parte del organizador <strong>Ryan Fahey</strong>, indicando que aprecia mi nota sobre el nivel 15. Aun asi el fallo sigue sin ser arreglado hasta el dia de la fecha <strong>16/03/2015</strong>.</p>

<p>Este es el fin de mi Write-Up del <strong>CTF</strong> de <strong>InfosecInstitute</strong>.</p>
]]></content>
        </item>
        
        <item>
            <title>[ES] CTF InfosecInstitute - Parte 2</title>
            <link>https://ezequieltbh.me/posts/2015/03/es-ctf-infosecinstitute-parte-2/</link>
            <pubDate>Sun, 15 Mar 2015 00:00:00 +0000</pubDate>
            
            <guid>https://ezequieltbh.me/posts/2015/03/es-ctf-infosecinstitute-parte-2/</guid>
            <description>Seguimos con los retos del CTF InfosecInstitute, esta vez del 6 al 10.
Level 6:
Nos encontramos con un Pcap, una captura de trafico de red asi que vamos a descargarla y ver que hay, utilizamos Wireshark para abrirla y nos encontramos con lo siguiente:
Demasiadas conexion cifradas TLS, al parecer se hizo una captura de un equipo que estaba navegando por HTTPS en una web, debido a que esta informacion viaja cifrada no podemos ver cual es el contenido a menos que se tenga el certificado del servidor el cual incluye la clave privada.</description>
            <content type="html"><![CDATA[<p>Seguimos con los retos del CTF InfosecInstitute, esta vez del 6 al 10.</p>

<p>Level 6:</p>

<p><img src="/images/posts/ctf-infosecinstitute-2/2015-03-14 17_19_23-.jpg" alt="Level-6-Captura-Red" /></p>

<p>Nos encontramos con un <strong>Pcap</strong>, una captura de trafico de red asi que vamos a descargarla y ver que hay, utilizamos <strong>Wireshark</strong> para abrirla y nos encontramos con lo siguiente:</p>

<p><img src="/images/posts/ctf-infosecinstitute-2/2015-03-14 17_23_26-.jpg" alt="Level-6-Captura-Red" /></p>

<p>Demasiadas conexion cifradas <strong>TLS</strong>, al parecer se hizo una captura de un equipo que estaba navegando por <strong>HTTPS</strong> en una web, debido a que esta informacion viaja cifrada no podemos ver cual es el contenido a menos que se tenga el certificado del servidor el cual incluye la clave privada.</p>

<p>Pero como no lo tenemos hay que buscar en los paquetes que no estan cifrados, sin ir mas lejos el primer paquete se puede observar en la imagen que contiene un string que llama la atencion&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">696e666f7365635f666c616769735f736e6966666564</code></pre></div>
<p>Despues de algunas pruebas, me encuentro que es un string con informacion hexadecimal que si lo decodificamos nos encontramos con el flag!</p>

<p><strong>Flag: infosec_flagis_sniffed</strong></p>

<p>Level 7:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">f00 not found
Something is not right here???
btw...bounty $70</code></pre></div>
<p>Eso es lo que nos muestra el reto, pero si vemos la url podemos ver que se esta viendo la URL <strong>404.php</strong>, pero normalmente los retos estan en <strong>level[Numero escrito en ingles].php</strong></p>

<p><img src="/images/posts/ctf-infosecinstitute-2/2015-03-14 17_38_30.jpg" alt="Level-7-Vacio-Blanco" /></p>

<p>No hay nada en esa URL, pero igualmente se puede accesar asi que hay que ver si hay algo escondido. Mirando bien los headers nos encontramos con lo siguiente:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">200 aW5mb3NlY19mbGFnaXNfeW91Zm91bmRpdA==</code></pre></div>
<p>200 OK es normalmente el status que devuelve una web si todo salio correctamente, y ahi hay un base64 asi que decodificandolo nos encontramos con el flag!</p>

<p><strong>Flag: infosec_flagis_youfoundit</strong></p>

<p>Level 8:</p>

<p><img src="/images/posts/ctf-infosecinstitute-2/2015-03-14 17_42_49.jpg" alt="Level-8-app-reversing" /></p>

<p>Misma imagen que antes pero distinta descarga: <strong>app.exe</strong>, ahora tenemos un ejecutable con lo que seguramente este reto sea sobre Reverse Engineering, el cual es el proceso de extraer informacion sobre el funcionamiento de algo sin tener informacion sobre el!</p>

<p>Para resolver este reto tenemos dos posibilidades:</p>

<ol>
<li><p>Utilizamos el comando <strong>string app.exe</strong> en Linux y mirando en la salida encontramos el flag.</p></li>

<li><p>Hacemos uso de <a href="https://www.hex-rays.com/products/ida/" target="_blank">IDA</a> o algun debugger y miramos cuales son los strings que almacena el ejecutable.</p></li>
</ol>

<p>En mi caso hice uso de Ida ya que crei que iba a ser un poco mas complejo el reto, para resolverlo simplemente iniciamos Ida y cuando haya terminado el analisis veremos lo siguiente:</p>

<p><img src="/images/posts/ctf-infosecinstitute-2/
2015-03-14 17_52_15-.jpg" alt="Level-8-app-reversing" /></p>

<p>Lo que ven es el codigo Assembler de <strong>app.exe</strong>, un pequeño programa que a simple vista muestra un mensaje y luego llama al comando <strong>netstat</strong>, si miramos bien encontraremos el flag el cual esta ubicado en la variable <strong>aInfosec_flagis</strong>.</p>

<p><strong>Flag: infosec_flagis_0x1a</strong></p>

<p>Level 9:</p>

<p><img src="/images/posts/ctf-infosecinstitute-2/2015-03-14 17_57_45.jpg" alt="Level-9-Login" /></p>

<p>En este nivel nos encontramos con un login el cual seguramente si lo pasamos obtendremos el flag, ahora la cuestion es como logearse correctamente.</p>

<p>Lo primero que se me vino a la mente fue utilizar <strong>SQL Injection</strong> asi que coloque una <strong>&lsquo;</strong> en el usuario y la contraseña, pero no tuve ninguna respuesta.</p>

<p>Debido a que es un <strong>CTF</strong> para <strong>&ldquo;noobs&rdquo;</strong> pense que la solucion seria mas sencilla por lo que empeze a comprobar credenciales por defecto, luego de varias pruebas encontre que <strong>root:attack</strong> era la combinacion correcta y me encontre con un alert que decia:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">ssaptluafed_sigalf_cesofni</code></pre></div>
<p>El cual es el flag pero dado vuelta!</p>

<p><strong>Flag: infosec_flagis_defaultpass</strong></p>

<p>Level 10:</p>

<p><img src="/images/posts/ctf-infosecinstitute-2/2015-03-14 18_07_02-.jpg" alt="Level-10-Audio" /></p>

<p>Nos encontramos con otra descarga pero esta vez es un audio un tanto extraño, se escucha algo acelerado pero no se puede entender nada.</p>

<p>Aca las posibilidades son 3:</p>

<ol>
<li><p>Esteganografia en el audio: habria que comprobar el histograma para ver si hay informacion guardada alli, tecnica <strong>LSB</strong>, adjunto de un archivo con algun programa (Steghide).</p></li>

<li><p>Metadatos</p></li>

<li><p>Reducir la velocidad de audio para ver si lo que hicieron fue acelerarlo solamente.</p></li>
</ol>

<p>Luego de algunas pruebas la posibilidad 3 es la correcta, utilizando <strong>Audacity</strong> hacemos un <strong>&ldquo;Cambio de velocidad&rdquo;</strong> y colocamos <strong>-88.00</strong> como <strong>&ldquo;Porcentaje de cambio&rdquo;</strong>, con eso podremos escuchar el flag, segun lo que puede escuchar es:</p>

<p><strong>Flag: infosec_flagis_sound</strong></p>

<p>Hasta aca la segunda parte, solo queda 1 con los ultimos 5 retos!</p>
]]></content>
        </item>
        
        <item>
            <title>[ES] CTF InfosecInstitute - Parte 1</title>
            <link>https://ezequieltbh.me/posts/2015/03/es-ctf-infosecinstitute-parte-1/</link>
            <pubDate>Sat, 14 Mar 2015 00:00:00 +0000</pubDate>
            
            <guid>https://ezequieltbh.me/posts/2015/03/es-ctf-infosecinstitute-parte-1/</guid>
            <description>El InfosecInstitute esta actualmente hosteando un CTF para &amp;ldquo;Noobs&amp;rdquo; con un bounty de $1200 dolares en total, que se distribuiran diferenciadamente entre los mejores Writeups para cada prueba.
En mi caso, los CTFs son una buena oportunidad para aprender asi que vamos alla.
Level 1:
En este nivel la frase lo dice todo: &amp;ldquo;Que el codigo fuente este con vosotros!&amp;rdquo;, asi que nos vamos a ver el codigo fuente de la web.</description>
            <content type="html"><![CDATA[<p>El <a href="https://resources.infosecinstitute.com/" target="_blank">InfosecInstitute</a> esta actualmente hosteando un <a href="http://ctf.infosecinstitute.com/" target="_blank">CTF</a> para &ldquo;Noobs&rdquo; con un bounty de $1200 dolares en total, que se distribuiran diferenciadamente entre los mejores Writeups para cada prueba.</p>

<p>En mi caso, los CTFs son una buena oportunidad para aprender asi que vamos alla.</p>

<p>Level 1:</p>

<p><img src="/images/posts/ctf-infosecinstitute-1/2015-03-14 00_48_30-.jpg" alt="Level-1-Source" /></p>

<p>En este nivel la frase lo dice todo: <strong>&ldquo;Que el codigo fuente este con vosotros!&rdquo;</strong>, asi que nos vamos a ver el codigo fuente de la web. Click derecho -&gt; Ver codigo fuente y en la primera linea nos encontramos con:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">&lt;!-- infosec_flagis_welcome --&gt;</code></pre></div>
<p>Un comentario de HTML con el Flag!</p>

<p><strong>Flag: infosec_flagis_welcome</strong></p>

<p>Level 2:</p>

<p><img src="/images/posts/ctf-infosecinstitute-1/2015-03-14 00_57_05-.jpg" alt="Level-2-Base64" /></p>

<p>Nos encontramos con una frase que nos indica que la imagen parece estar &ldquo;rota&rdquo;, y nos dice que si podemos revisar el archivo. Miramos el codigo fuente de la pagina y nos encontramos con lo siguiente:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-HTML" data-lang="HTML">&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;lvlone&#34;</span>&gt;
   &lt;<span style="color:#f92672">img</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;img/leveltwo.jpeg&#34;</span> /&gt; </code></pre></div>
<p>Por lo que la imagen que buscamos esta en <strong>/img/leveltwo.jpeg</strong>, una vez guardada podemos ver que su contenido es:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">aW5mb3NlY19mbGFnaXNfd2VhcmVqdXN0c3RhcnRpbmc=</code></pre></div>
<p>Por el <strong>=</strong> del final uno se da cuenta rapidamente que se trata de Base64 un algoritmo de codificacion de texto muy utilizado especialemente en SMTP para envio de adjuntos y enviar la password.</p>

<p>Decodificandolo obtenemos el flag</p>

<p><strong><em>Flag: infosec_flagis_wearejuststarting</em></strong></p>

<p>Level 3:</p>

<p><img src="/images/posts/ctf-infosecinstitute-1/2015-03-14 03_54_41.jpg" alt="Level-3-Qrcode" /></p>

<p>En este nivel nos encontramos directamente con un <a href="https://es.wikipedia.org/wiki/C%C3%B3digo_QR" target="_blank">Qr Code</a>, el mismo es una imagen que es capaz de guardar informacion tanto texto como binario, podemos utilizar herramientas online o software para decodificar esa informacion.</p>

<p>En mi caso utilize la herramienta online <a href="http://zxing.org/" target="_blank">http://zxing.org/</a> y obtuve lo siguiente</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">.. -. ..-. --- ... . -.-. ..-. .-.. .- --. .. ... -- --- .-. ... .. -. --.</code></pre></div>
<p>Esto a simple vista uno puede reconocer que es codigo morse : cortos ( . ) y largos ( - ) repitiendose, decodificandolo con la herramienta <a href="https://morsecode.scphillips.com/translator.html" target="_blank">MorseCode</a> se obtiene el flag.</p>

<p><strong>Flag: INFOSECFLAGISMORSING</strong></p>

<p>Level 4:</p>

<p><img src="/images/posts/ctf-infosecinstitute-1/2015-03-14 04_06_12.jpg" alt="Level-4-Cookies" /></p>

<p>La frase lo dice todo: <strong>&ldquo;HTTP significa Hypertext Transfer Protocol&rdquo;</strong>, por lo que debemos buscar en algun elemento de HTTP, lo primero que se me viene a la mente son las cookies, si miramos las cookies nos encontramos con que hay una cookie de sesion llamada fusdorah cuyo contenido es</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">vasbfrp_syntvf_jrybirpbbxvrf</code></pre></div>
<p>Despues de algunas pruebas concluyo que esta codificado en <a href="https://es.wikipedia.org/wiki/Cifrado_C%C3%A9sar" target="_blank">Cesar</a>, un algoritmo de codificacion por desplazamiento, con la herramienta online <a href="https://www.dcode.fr/chiffre-cesar" target="_blank">Chiffre de Cesar</a> lo decodificamos y obtenemos el flag!</p>

<p><strong><em>Flag: INFOSECFLAGISWELOVECOOKIES</em></strong></p>

<p>Level 5 :</p>

<p>Al entrar en el reto nos encontramos con un loop infinito de un <strong>alert(&ldquo;Hacker&rdquo;);</strong> para seguir necesitamos pararlo asi que si usamos Firefox hacemos click en <strong>&ldquo;Evitar que esta pagina cree dialogos adicionales&rdquo;</strong> o si usamos otro navegador podes deshabilitar javascript antes de entrar.</p>

<p>Una vez entramos, nos encontramos con lo siguiente:</p>

<p><img src="/images/posts/ctf-infosecinstitute-1/2015-03-14 04_15_01.jpg" alt="Level-5-Esteganografia" /></p>

<p>Revisando el codigo fuente no encontramos nada&hellip; la imagen a simple vista no contiene nada oculto, si la revisamos con un editor hexadecimal no encontramos nada tampoco&hellip; Ok esto es esteganografia seguro&hellip;</p>

<p>Debido a que la imagen es jpeg descartamos LSB debido a la compresion que realiza el algoritmo, no hay un canal Alpha donde guardar pixeles que pueda guardar informacion asi que descartado tambien.</p>

<p>Una busqueda por google nos permite encontrar la <a href="https://ten4word.files.wordpress.com/2014/12/history-channel-meme-humans-i18.jpg" target="_blank">Imagen original</a> y podemos ver que la imagen en el reto tiene mayor peso, entonces se utilizo alguna herramienta para cifrar la informacion y guardarla dentro de la imagen.</p>

<p>Luego de algunas pruebas steghide es la herramienta que utilizaron</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">steghide extract -sf aliens.jpg
Password: </code></pre></div>
<p>Si, no hay password!</p>

<p>Se extrae un archivo llamado All.txt el cual contiene:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Textfile" data-lang="Textfile">011010010110111001100110011011110111001101100101011000110101111
10110011001101100011000010110011101101001011100110101111101110011
011101000110010101100111011000010110110001101001011001010110111001110011</code></pre></div>
<p>Binario&hellip; Si lo <a href="https://www.elhacker.net/convertidor.html" target="_blank">decodificamos</a> obtenemos la flag!</p>

<p><strong><em>Flag: infosec_flagis_stegaliens</em></strong></p>

<p>Y hasta aca los primeros 5 retos de este CTF, por el momento sencillos pero mas adelante se complica un poco mas.</p>
]]></content>
        </item>
        
    </channel>
</rss>
